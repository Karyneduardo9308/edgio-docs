{
    "$schema": "https://json-schema.org/draft/2019-09/schema",
    "type": "object",
    "required": [
        "properties"
    ],
    "additionalProperties": false,
    "properties": {
        "raw": {
            "$ref": "#/definitions/raw"
        },
        "properties": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/property"
            },
            "minItems": 1
        },
        "rules": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/rules"
            }
        },
        "rtld": {
            "$ref": "schema-base.json#/definitions/rtld"
        },
        "exclude_account_defaults":{
            "$ref": "#/definitions/exclude_account_defaults"             
        },
        "experiments": {
            "type": "array",
            "items": {
                "$ref": "schema-base.json#/definitions/experiment"
            }
        }
    },
    "definitions": {
        "access": {
            "$ref":"schema-base.json#/definitions/access",
            "unevaluatedProperties": false,
            "properties": {
                "ectoken_denial_code": {
                    "$ref": "schema-base.json#/definitions/http_response_no_body",
                    "$comment":"admin rule"
                },
                "quick_response_clean": {
                    "$ref": "schema-base.json#/definitions/http_response_no_body",
                    "$comment":"admin rule"
                },
                "quick_response_raw": {
                    "$ref": "schema-base.json#/definitions/http_response_no_body",
                    "$comment":"admin rule"
                },
                "token_auth_parameter": {
                    "$ref": "schema-base.json#/definitions/generic_field",
                    "$comment":"admin rule"
                },
                "token_auth_keys": {
                    "type": "object",
                    "additionalProperties": false,
                    "$comment":"admin rule",
                    "properties": {
                        "primary": {
                            "type": "string"
                        },
                        "primary_min_version": {
                            "type": "string",
                            "enum": [
                                "v2",
                                "v3"
                            ]
                        },
                        "backup": {
                            "type": "string"
                        },
                        "backup_min_version": {
                            "type": "string",
                            "enum": [
                                "v2",
                                "v3"
                            ]
                        }
                    }
                }
            }
        },
        "caching": {
            "$ref":"schema-base.json#/definitions/caching",
            "unevaluatedProperties": false,
            "properties": {
                "cache_fill_check_downstream_range": {
                    "type": "boolean",
                    "$comment":"admin rule"
                },
                "cache_fill_max_rate": {
                    "$ref": "schema-base.json#/definitions/bytes",
                    "$comment":"admin rule"
                },
                "cache_fill_spawn_subrequest_for_miss": {
                    "type": "boolean",
                    "$comment":"admin rule"
                },
                "cache_fill_wait_time": {
                    "type": "integer",
                    "$comment":"admin rule"
                },
                "cache_fill_wait_failure_reply": {
                    "$ref": "schema-base.json#/definitions/http_status_code",
                    "$comment":"admin rule"
                },
                "cache_include_http_host_in_key": {
                    "type": "boolean",
                    "$comment":"admin rule"
                },
                "complete_cache_fill": {
                    "type": "boolean",
                    "$comment":"admin rule"
                },
                "compressed_content_validation": {
                    "type": "integer",
                    "minimum": 0,
                    "$comment":"admin rule"
                },
                "compression_max_filesize": {
                    "type": "integer",
                    "$comment":"admin rule"
                },
                "compression_min_filesize": {
                    "type": "integer",
                    "$comment":"admin rule"
                },
                "default_internal_max_age": {
                    "$ref": "schema-base.json#/definitions/time_interval",
                    "$comment":"admin rule"
                },
                "second_hit_caching": {
                    "type": "boolean",
                    "$comment":"admin rule"
                },
                "cache_fill_share_chunked_transfer": {
                    "type": "boolean",
                    "$comment":"admin rule"
                },
                "use_expires_delta": {
                    "type": "boolean",
                    "$comment":"admin rule"
                },
                "scheme_alias": {
                    "type": "string",
                    "$comment":"admin rule"
                },
                "external_ttl": {
                    "$ref": "schema-base.json#/definitions/time_interval",
                    "$comment":"admin rule"
                },
                "set_sharable_status_codes": {
                    "type": "array",
                    "items": {
                        "$ref": "schema-base.json#/definitions/http_status_code"
                    },
                    "$comment":"admin rule"
                },
                "eviction_slope": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 255,
                    "$comment":"admin rule"
                },
                "eviction_ttl": {
                    "$ref": "schema-base.json#/definitions/time_interval",
                    "$comment":"admin rule"
                }
            }
        },
        "headers": {
            "$ref": "schema-base.json#/definitions/headers",
            "unevaluatedProperties": false,
            "properties": {
                "set_blank_server_header": {
                    "type": "boolean",
                    "$comment":"admin rule"
                }
            }
        },
        "logless": {
            "type": "object",
            "additionalProperties": false,
            "$comment": "this in other places has a log file, but we're not giving customers control of that",
            "properties": {
                "logless_billing": {
                    "type": "boolean",
                    "$comment":"admin rule"
                }
            }
        },
        "logs": {
            "$ref":"schema-base.json#/definitions/logs",
            "unevaluatedProperties": false,
            "properties": {
                "raw_log_retrieval": {
                    "type": "boolean",
                    "$comment":"admin rule"
                },
                "debug_logging": {
                    "type": "boolean",
                    "$comment":"admin rule"
                },
                "custom_field": {
                    "type": "string",
                    "$comment":"admin rule"
                },
                "remote_logging": {
                    "type": "boolean",
                    "$comment":"admin rule"
                }
            }
        },
        "origin": {
            "$ref":"schema-base.json#/definitions/origin",
            "unevaluatedProperties": false,
            "properties": {
                "backoff_scale_down": {
                    "type": "number",
                    "$comment":"admin rule"
                },
                "backoff_scale_up": {
                    "type": "number",
                    "$comment":"admin rule"
                },
                "connect_timeout": {
                    "type": "integer",
                    "$comment":"admin rule"
                },
                "customer_origin_failover_on_tcp_error": {
                    "type": "boolean",
                    "$comment":"admin rule"
                },
                "disable_time": {
                    "type": "number",
                    "$comment":"admin rule"
                },
                "idle_timeout": {
                    "type": "integer",
                    "$comment":"admin rule"
                },
                "iproxy_failover_codes": {
                    "type": "array",
                    "items": {
                        "$ref": "schema-base.json#/definitions/http_status_code"
                    },                    
                    "$comment":"admin rule"
                },
                "max_backlog_size": {
                    "type": "integer",
                    "$comment":"admin rule"
                },
                "max_backoff_factor": {
                    "type": "number",
                    "$comment":"admin rule"
                },
                "max_connect_try": {
                    "type": "integer",
                    "$comment":"admin rule"
                },
                "max_disable_time": {
                    "type": "number",
                    "$comment":"admin rule"
                },
                "max_failovers": {
                    "type": "integer",
                    "$comment":"admin rule"
                },
                "max_request_try": {
                    "type": "integer",
                    "$comment":"admin rule"
                },
                "origin_failover_codes": {
                    "type": "array",
                    "items": {
                        "$ref": "schema-base.json#/definitions/http_status_code"
                    },
                    "$comment":"admin rule"
                },
                "origin_ssl_cipher_list": {
                    "type": "string",
                    "pattern": "([!-\\+]?[-_a-zA-Z0-9]+[:, ]*)+",
                    "$comment":"admin rule"
                },
                "origin_tags": {
                    "type": "array",
                    "items": {
                        "$ref": "schema-base.json#/definitions/generic_field"
                    },
                    "$comment":"admin rule"
                },
                "read_idle_timeout": {
                    "type": "integer"
                }
            }
        },
        "specialty": {
            "type": "object",
            "unevaluatedProperties": false,
            "properties": {
                "max_post_request_size": {
                    "$ref": "schema-base.json#/definitions/bytes",
                    "$comment":"admin rule"
                },
                "set_report_code": {
                    "type": "integer",
                    "minimum": 0,
                    "$comment":"admin rule"
                },
                "shunt_midgress_logs": {
                    "type": "boolean",
                    "$comment":"admin rule"
                },
                "enable_transcode": {
                    "type": "boolean",
                    "$comment":"admin rule"
                },
                "transcode_mimetypes": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "pattern": "text/plain|text/html|text/css|application/x-javascript|text/javascript"
                    },
                    "$comment":"admin rule"
                },
                "transcode_allowed_encodings": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "pattern": "gzip|deflate|bzip2|brotli|identity"
                    },
                    "$comment":"admin rule"
                },
                "web_socket": {
                    "type": "boolean",
                    "$comment":"admin rule"
                },
                "connection_topic": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "enum": [
                            "an",
                            "tpm_network_optimization",
                            "ei_selected_full"
                        ]
                    },
                    "$comment":"admin rule"
                },
                "lua_run_uri_clean": {
                    "type": "string",
                    "$comment":"admin rule"
                }
            }
        },
        "raw":{
            "type": "string",
            "$comment": "base64 encoded text that represents raw sailfish config"
        },
        "exclude_account_defaults":{
            "type": "array",
            "items": {
                "type": "string",
                "enum": [
                    "connection_topic",
                    "cache_shards",
                    "server_normalize_path",
                    "server_normalize_query",
                    "server_allow_encoded_slashes",
                    "allow_prefetching_uncached_content",
                    "allow_server_timing",
                    "compress_allowed_encodings",
                    "compress_preferred_encodings",
                    "compress_brotli_level",
                    "cache_cacheable_encodings"
                ]
            },
            "$comment":"admin rule"
        },
        "features": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "edge_function": {
                    "$ref": "schema-base.json#/definitions/edge_function"
                },
                "comment": {
                    "$ref": "schema-base.json#/definitions/comment"
                },
                "access": {
                    "$ref": "#/definitions/access"
                },
                "caching": {
                    "$ref": "#/definitions/caching"
                },
                "response": {
                    "$ref": "schema-base.json#/definitions/response"
                },
                "headers": {
                    "$ref": "#/definitions/headers"
                },
                "logless":{
                    "$ref": "#/definitions/logless"
                },
                "logs": {
                    "$ref": "#/definitions/logs"
                },
                "origin": {
                    "$ref": "#/definitions/origin"
                },
                "specialty": {
                    "$ref": "#/definitions/specialty"
                },
                "url": {
                    "$ref": "schema-base.json#/definitions/url"
                },
                "client": {
                    "$ref": "schema-base.json#/definitions/client"
                },
                "set_variables": {
                    "$ref": "schema-base.json#/definitions/set_variables"
                },
                "raw": {
                    "$ref": "#/definitions/raw"
                }
            }
        },
        "matches": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "if": {
                    "type": "array",
                    "minItems": 2,
                    "$comment": "2 arguments is if-then.  3 is if-then-else.  anything more takes if-then elseif-then",
                    "items": {
                        "anyOf": [
                            {
                                "$comment": "nested matches",
                                "$ref": "#/definitions/matches"
                            },
                            {
                                "$ref": "schema-base.json#/definitions/boolean"
                            },
                            {
                                "$comment": "this is the first/odd elements that define a conditional statement",
                                "$ref": "schema-base.json#/definitions/conditionals"
                            },
                            {
                                "$comment": "these are the actual features be enabled",
                                "$ref": "#/definitions/features"
                            },
                            {
                                "type": "array",
                                "items": {
                                    "anyOf": [
                                        {
                                            "$comment": "these are the actual features be enabled",
                                            "$ref": "#/definitions/features"
                                        },
                                        {
                                            "$comment": "nested matches",
                                            "$ref": "#/definitions/matches"
                                        }
                                    ]
                                }
                            }
                        ]
                    }
                },
                "comment": {
                    "$ref": "schema-base.json#/definitions/comment"
                }                
            }
        },
        "rules": {
            "anyOf": [
                {
                    "type": "object",
                    "$ref": "#/definitions/matches"
                },
                {
                    "type": "object",
                    "$comment": "we need to be able to drop all features in here too, to cover 'always' conditions natively",
                    "$ref": "#/definitions/features"
                },
                {
                    "type": "array",
                    "items": {
                        "anyOf": [
                            {
                                "$ref": "#/definitions/features"
                            }
                        ]
                    }
                }
            ]
        },
        "property": {
            "type": "object",
            "additionalProperties": false,
            "required": [
                "name",
                "origins",
                "hostnames"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "pattern": "^[a-zA-Z0-9 ()_.-]{1,50}$"
                },
                "origins": {
                    "type": "array",
                    "items": {
                        "$ref": "schema-base.json#/definitions/origins"
                    },
                    "minItems": 1,
                    "maxItems": 100
                },
                "hostnames": {
                    "type": "array",
                    "items": {
                        "$ref": "schema-base.json#/definitions/hostnames"
                    },
                    "minItems": 1
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/rules"
                    }
                },
                "edge_functions": {
                    "$ref": "schema-base.json#/definitions/edge_functions"
                },
                "environment_variables": {
                    "$ref": "schema-base.json#/definitions/environment_variables"
                }
            }
        }
    }
}
