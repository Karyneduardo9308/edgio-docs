{
  "info": {
    "title": "Edgio Edgio APIs",
    "description": "API spec for Edgio APIs",
    "termsOfService": "https://edg.io/legal/terms-of-service/",
    "contact": {
      "name": "info@edg.io",
      "email": "info@edg.io",
      "url": "https://edg.io/contact-support/"
    },
    "version": "1.0.0-beta"
  },
  "swagger": "2.0",
  "produces": [
    "application/json"
  ],
  "securityDefinitions": {
    "Bearer": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header",
      "description": "Enter the JWT token with the `Bearer` prefix, e.g. `Bearer abcdef`.\nThe token will need the following scopes:\n\n"
    }
  },
  "security": [
    {
      "Bearer": [

      ]
    }
  ],
  "host": "localhost:3000",
  "basePath": "/api",
  "tags": [
    {
      "name": "tls-certs",
      "description": "Operations about tls-certs"
    },
    {
      "name": "deployments",
      "description": "Operations about deployments"
    },
    {
      "name": "configs",
      "description": "Operations about configs"
    },
    {
      "name": "purge requests",
      "description": "Operations about purge requests"
    },
    {
      "name": "environments",
      "description": "Operations about environments"
    },
    {
      "name": "properties",
      "description": "Operations about properties"
    },
    {
      "name": "organizations",
      "description": "Operations about organizations"
    }
  ],
  "paths": {
    "/config/v0.1/tls-certs/{cert_id}": {
      "get": {
        "summary": "Read tls cert",
        "description": "Read tls cert",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "cert_id",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Read tls cert",
            "schema": {
              "$ref": "#/definitions/Config_V1_Entities_TlsCert"
            }
          },
          "400": {
            "description": "UserError",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_UserError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_GeneralError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_GeneralError"
            }
          },
          "404": {
            "description": "RecordNotFound",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_GeneralError"
            }
          },
          "500": {
            "description": "ServerError",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_GeneralError"
            }
          }
        },
        "tags": [
          "tls-certs"
        ],
        "operationId": "getConfigV01TlsCertsCertId"
      }
    },
    "/config/v0.1/tls-certs": {
      "post": {
        "summary": "Create a new tls cert",
        "description": "Upload and activate a new TLS certificate for an environment",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "postConfigV01TlsCerts",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/postConfigV01TlsCerts"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Upload and activate a new TLS certificate for an environment",
            "schema": {
              "$ref": "#/definitions/Config_V1_Entities_TlsCert"
            }
          },
          "400": {
            "description": "UserError",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_UserError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_GeneralError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_GeneralError"
            }
          },
          "404": {
            "description": "RecordNotFound",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_GeneralError"
            }
          },
          "500": {
            "description": "ServerError",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_GeneralError"
            }
          }
        },
        "tags": [
          "tls-certs"
        ],
        "operationId": "postConfigV01TlsCerts"
      },
      "get": {
        "summary": "List tls certs",
        "description": "List historical TLS certificates for an environment",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "description": "Page number starting from 0",
            "type": "integer",
            "format": "int32",
            "default": 0,
            "required": false
          },
          {
            "in": "query",
            "name": "page_size",
            "description": "Number of results per page. Accepted value from 1-100. Default: 20",
            "type": "integer",
            "format": "int32",
            "default": 20,
            "required": false
          },
          {
            "in": "query",
            "name": "environment_id",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "List historical TLS certificates for an environment",
            "schema": {
              "$ref": "#/definitions/Config_V1_Entities_TlsCert_Collection"
            }
          },
          "400": {
            "description": "UserError",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_UserError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_GeneralError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_GeneralError"
            }
          },
          "404": {
            "description": "RecordNotFound",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_GeneralError"
            }
          },
          "500": {
            "description": "ServerError",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_GeneralError"
            }
          }
        },
        "tags": [
          "tls-certs"
        ],
        "operationId": "getConfigV01TlsCerts"
      }
    },
    "/config/v0.1/deployments/{deployment_id}/logs": {
      "get": {
        "summary": "Get the logs for a specific deployment",
        "description": "Get the logs for a specific deployment",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "deployment_id",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Get the logs for a specific deployment",
            "schema": {
              "$ref": "#/definitions/Config_V1_Entities_Deployment_Logs"
            }
          },
          "400": {
            "description": "UserError",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_UserError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_GeneralError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_GeneralError"
            }
          },
          "404": {
            "description": "RecordNotFound",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_GeneralError"
            }
          },
          "500": {
            "description": "ServerError",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_GeneralError"
            }
          }
        },
        "tags": [
          "deployments"
        ],
        "operationId": "getConfigV01DeploymentsDeploymentIdLogs"
      }
    },
    "/config/v0.1/deployments/{deployment_id}": {
      "get": {
        "summary": "Read deployment",
        "description": "Read deployment",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "deployment_id",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Read deployment",
            "schema": {
              "$ref": "#/definitions/Config_V1_Entities_Deployment"
            }
          },
          "400": {
            "description": "UserError",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_UserError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_GeneralError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_GeneralError"
            }
          },
          "404": {
            "description": "RecordNotFound",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_GeneralError"
            }
          },
          "500": {
            "description": "ServerError",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_GeneralError"
            }
          }
        },
        "tags": [
          "deployments"
        ],
        "operationId": "getConfigV01DeploymentsDeploymentId"
      }
    },
    "/config/v0.1/configs/{config_id}": {
      "get": {
        "summary": "Retrieve an Edge Configuration",
        "description": "Get a specific Edge Configuration",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "config_id",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Get a specific Edge Configuration",
            "schema": {
              "$ref": "#/definitions/Config_V1_Entities_Config"
            }
          },
          "400": {
            "description": "UserError",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_UserError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_GeneralError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_GeneralError"
            }
          },
          "404": {
            "description": "RecordNotFound",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_GeneralError"
            }
          },
          "500": {
            "description": "ServerError",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_GeneralError"
            }
          }
        },
        "tags": [
          "configs"
        ],
        "operationId": "getConfigV01ConfigsConfigId"
      }
    },
    "/config/v0.1/configs": {
      "post": {
        "summary": "Deploy Edge Configuration on environment",
        "description": "Replace and deploy a complete edge configuration for the given environment",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "postConfigV01Configs",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/postConfigV01Configs"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Replace and deploy a complete edge configuration for the given environment",
            "schema": {
              "$ref": "#/definitions/Config_V1_Entities_Config"
            }
          },
          "400": {
            "description": "UserError",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_UserError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_GeneralError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_GeneralError"
            }
          },
          "404": {
            "description": "RecordNotFound",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_GeneralError"
            }
          },
          "500": {
            "description": "ServerError",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_GeneralError"
            }
          }
        },
        "tags": [
          "configs"
        ],
        "operationId": "postConfigV01Configs"
      }
    },
    "/cache/v0.1/purge-requests/{request_id}": {
      "get": {
        "summary": "Get Status of Cache Purge",
        "description": "Request status of cache purge",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "request_id",
            "description": "The ID identifying the original purge request.",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Request status of cache purge",
            "schema": {
              "$ref": "#/definitions/Cache_V1_Entities_PurgeRequest"
            }
          },
          "400": {
            "description": "UserError",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_UserError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_GeneralError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_GeneralError"
            }
          },
          "404": {
            "description": "RecordNotFound",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_GeneralError"
            }
          },
          "500": {
            "description": "ServerError",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_GeneralError"
            }
          }
        },
        "tags": [
          "purge requests"
        ],
        "operationId": "getCacheV01PurgeRequestsRequestId"
      }
    },
    "/cache/v0.1/purge-requests": {
      "post": {
        "summary": "Purge Cache of Environment",
        "description": "Request cache purge of environment",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "postCacheV01PurgeRequests",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/postCacheV01PurgeRequests"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Request cache purge of environment",
            "schema": {
              "$ref": "#/definitions/Cache_V1_Entities_PurgeRequest"
            }
          },
          "400": {
            "description": "UserError",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_UserError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_GeneralError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_GeneralError"
            }
          },
          "404": {
            "description": "RecordNotFound",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_GeneralError"
            }
          },
          "500": {
            "description": "ServerError",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_GeneralError"
            }
          },
          "429": {
            "description": "RateLimitReached",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_GeneralError"
            }
          }
        },
        "tags": [
          "purge requests"
        ],
        "operationId": "postCacheV01PurgeRequests"
      }
    },
    "/accounts/v0.1/environments/{environment_id}": {
      "delete": {
        "summary": "Delete environment",
        "description": "Delete environment",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "environment_id",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Delete environment",
            "schema": {
              "$ref": "#/definitions/Accounts_V1_Entities_Environment"
            }
          },
          "400": {
            "description": "UserError",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_UserError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_GeneralError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_GeneralError"
            }
          },
          "404": {
            "description": "RecordNotFound",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_GeneralError"
            }
          },
          "500": {
            "description": "ServerError",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_GeneralError"
            }
          }
        },
        "tags": [
          "environments"
        ],
        "operationId": "deleteAccountsV01EnvironmentsEnvironmentId"
      },
      "patch": {
        "summary": "Update environment",
        "description": "Update environment",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "environment_id",
            "type": "string",
            "required": true
          },
          {
            "name": "patchAccountsV01EnvironmentsEnvironmentId",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/patchAccountsV01EnvironmentsEnvironmentId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Update environment",
            "schema": {
              "$ref": "#/definitions/Accounts_V1_Entities_Environment"
            }
          },
          "400": {
            "description": "UserError",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_UserError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_GeneralError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_GeneralError"
            }
          },
          "404": {
            "description": "RecordNotFound",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_GeneralError"
            }
          },
          "500": {
            "description": "ServerError",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_GeneralError"
            }
          }
        },
        "tags": [
          "environments"
        ],
        "operationId": "patchAccountsV01EnvironmentsEnvironmentId"
      },
      "get": {
        "summary": "Read environment",
        "description": "Read environment",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "environment_id",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Read environment",
            "schema": {
              "$ref": "#/definitions/Accounts_V1_Entities_Environment"
            }
          },
          "400": {
            "description": "UserError",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_UserError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_GeneralError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_GeneralError"
            }
          },
          "404": {
            "description": "RecordNotFound",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_GeneralError"
            }
          },
          "500": {
            "description": "ServerError",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_GeneralError"
            }
          }
        },
        "tags": [
          "environments"
        ],
        "operationId": "getAccountsV01EnvironmentsEnvironmentId"
      }
    },
    "/accounts/v0.1/environments": {
      "post": {
        "summary": "Create a new environment",
        "description": "Create a new environment",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "postAccountsV01Environments",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/postAccountsV01Environments"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Create a new environment",
            "schema": {
              "$ref": "#/definitions/Accounts_V1_Entities_Environment"
            }
          },
          "400": {
            "description": "UserError",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_UserError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_GeneralError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_GeneralError"
            }
          },
          "404": {
            "description": "RecordNotFound",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_GeneralError"
            }
          },
          "500": {
            "description": "ServerError",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_GeneralError"
            }
          }
        },
        "tags": [
          "environments"
        ],
        "operationId": "postAccountsV01Environments"
      },
      "get": {
        "summary": "List environments",
        "description": "List environments",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "description": "Page number starting from 0",
            "type": "integer",
            "format": "int32",
            "default": 0,
            "required": false
          },
          {
            "in": "query",
            "name": "page_size",
            "description": "Number of results per page. Accepted value from 1-100. Default: 20",
            "type": "integer",
            "format": "int32",
            "default": 20,
            "required": false
          },
          {
            "in": "query",
            "name": "property_id",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "List environments",
            "schema": {
              "$ref": "#/definitions/Accounts_V1_Entities_Environment_Collection"
            }
          },
          "400": {
            "description": "UserError",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_UserError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_GeneralError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_GeneralError"
            }
          },
          "404": {
            "description": "RecordNotFound",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_GeneralError"
            }
          },
          "500": {
            "description": "ServerError",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_GeneralError"
            }
          }
        },
        "tags": [
          "environments"
        ],
        "operationId": "getAccountsV01Environments"
      }
    },
    "/accounts/v0.1/properties/{property_id}": {
      "delete": {
        "summary": "Delete property",
        "description": "Delete property",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "property_id",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Delete property",
            "schema": {
              "$ref": "#/definitions/Accounts_V1_Entities_Property"
            }
          },
          "400": {
            "description": "UserError",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_UserError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_GeneralError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_GeneralError"
            }
          },
          "404": {
            "description": "RecordNotFound",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_GeneralError"
            }
          },
          "500": {
            "description": "ServerError",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_GeneralError"
            }
          }
        },
        "tags": [
          "properties"
        ],
        "operationId": "deleteAccountsV01PropertiesPropertyId"
      },
      "patch": {
        "summary": "Update property",
        "description": "Update property",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "property_id",
            "type": "string",
            "required": true
          },
          {
            "name": "patchAccountsV01PropertiesPropertyId",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/patchAccountsV01PropertiesPropertyId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Update property",
            "schema": {
              "$ref": "#/definitions/Accounts_V1_Entities_Property"
            }
          },
          "400": {
            "description": "UserError",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_UserError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_GeneralError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_GeneralError"
            }
          },
          "404": {
            "description": "RecordNotFound",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_GeneralError"
            }
          },
          "500": {
            "description": "ServerError",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_GeneralError"
            }
          }
        },
        "tags": [
          "properties"
        ],
        "operationId": "patchAccountsV01PropertiesPropertyId"
      },
      "get": {
        "summary": "Read property",
        "description": "Read property",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "property_id",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Read property",
            "schema": {
              "$ref": "#/definitions/Accounts_V1_Entities_Property"
            }
          },
          "400": {
            "description": "UserError",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_UserError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_GeneralError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_GeneralError"
            }
          },
          "404": {
            "description": "RecordNotFound",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_GeneralError"
            }
          },
          "500": {
            "description": "ServerError",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_GeneralError"
            }
          }
        },
        "tags": [
          "properties"
        ],
        "operationId": "getAccountsV01PropertiesPropertyId"
      }
    },
    "/accounts/v0.1/properties": {
      "post": {
        "summary": "Create a new property",
        "description": "Create a new property",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "postAccountsV01Properties",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/postAccountsV01Properties"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Create a new property",
            "schema": {
              "$ref": "#/definitions/Accounts_V1_Entities_Property"
            }
          },
          "400": {
            "description": "UserError",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_UserError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_GeneralError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_GeneralError"
            }
          },
          "404": {
            "description": "RecordNotFound",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_GeneralError"
            }
          },
          "500": {
            "description": "ServerError",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_GeneralError"
            }
          }
        },
        "tags": [
          "properties"
        ],
        "operationId": "postAccountsV01Properties"
      },
      "get": {
        "summary": "List properties",
        "description": "List properties",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "description": "Page number starting from 0",
            "type": "integer",
            "format": "int32",
            "default": 0,
            "required": false
          },
          {
            "in": "query",
            "name": "page_size",
            "description": "Number of results per page. Accepted value from 1-100. Default: 20",
            "type": "integer",
            "format": "int32",
            "default": 20,
            "required": false
          },
          {
            "in": "query",
            "name": "organization_id",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "List properties",
            "schema": {
              "$ref": "#/definitions/Accounts_V1_Entities_Property_Collection"
            }
          },
          "400": {
            "description": "UserError",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_UserError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_GeneralError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_GeneralError"
            }
          },
          "404": {
            "description": "RecordNotFound",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_GeneralError"
            }
          },
          "500": {
            "description": "ServerError",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_GeneralError"
            }
          }
        },
        "tags": [
          "properties"
        ],
        "operationId": "getAccountsV01Properties"
      }
    },
    "/accounts/v0.1/organizations/{organization_id}": {
      "delete": {
        "summary": "Delete organization",
        "description": "Delete organization",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "organization_id",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Delete organization",
            "schema": {
              "$ref": "#/definitions/Accounts_V1_Entities_Organization"
            }
          },
          "400": {
            "description": "UserError",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_UserError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_GeneralError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_GeneralError"
            }
          },
          "404": {
            "description": "RecordNotFound",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_GeneralError"
            }
          },
          "500": {
            "description": "ServerError",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_GeneralError"
            }
          }
        },
        "tags": [
          "organizations"
        ],
        "operationId": "deleteAccountsV01OrganizationsOrganizationId"
      },
      "patch": {
        "summary": "Update organization",
        "description": "Update organization",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "organization_id",
            "type": "string",
            "required": true
          },
          {
            "name": "patchAccountsV01OrganizationsOrganizationId",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/patchAccountsV01OrganizationsOrganizationId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Update organization",
            "schema": {
              "$ref": "#/definitions/Accounts_V1_Entities_Organization"
            }
          },
          "400": {
            "description": "UserError",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_UserError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_GeneralError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_GeneralError"
            }
          },
          "404": {
            "description": "RecordNotFound",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_GeneralError"
            }
          },
          "500": {
            "description": "ServerError",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_GeneralError"
            }
          }
        },
        "tags": [
          "organizations"
        ],
        "operationId": "patchAccountsV01OrganizationsOrganizationId"
      },
      "get": {
        "summary": "Read organization",
        "description": "Read organization",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "organization_id",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Read organization",
            "schema": {
              "$ref": "#/definitions/Accounts_V1_Entities_Organization"
            }
          },
          "400": {
            "description": "UserError",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_UserError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_GeneralError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_GeneralError"
            }
          },
          "404": {
            "description": "RecordNotFound",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_GeneralError"
            }
          },
          "500": {
            "description": "ServerError",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_GeneralError"
            }
          }
        },
        "tags": [
          "organizations"
        ],
        "operationId": "getAccountsV01OrganizationsOrganizationId"
      }
    },
    "/accounts/v0.1/organizations": {
      "post": {
        "summary": "Create a new organization",
        "description": "Create a new organization",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "partner_id",
            "type": "string",
            "required": false
          },
          {
            "name": "postAccountsV01Organizations",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/postAccountsV01Organizations"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Create a new organization",
            "schema": {
              "$ref": "#/definitions/Accounts_V1_Entities_Organization"
            }
          },
          "400": {
            "description": "UserError",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_UserError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_GeneralError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_GeneralError"
            }
          },
          "404": {
            "description": "RecordNotFound",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_GeneralError"
            }
          },
          "500": {
            "description": "ServerError",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_GeneralError"
            }
          }
        },
        "tags": [
          "organizations"
        ],
        "operationId": "postAccountsV01Organizations"
      },
      "get": {
        "summary": "List organizations",
        "description": "List organizations",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "description": "Page number starting from 0",
            "type": "integer",
            "format": "int32",
            "default": 0,
            "required": false
          },
          {
            "in": "query",
            "name": "page_size",
            "description": "Number of results per page. Accepted value from 1-100. Default: 20",
            "type": "integer",
            "format": "int32",
            "default": 20,
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "List organizations",
            "schema": {
              "$ref": "#/definitions/Accounts_V1_Entities_Organization_Collection"
            }
          },
          "400": {
            "description": "UserError",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_UserError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_GeneralError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_GeneralError"
            }
          },
          "404": {
            "description": "RecordNotFound",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_GeneralError"
            }
          },
          "500": {
            "description": "ServerError",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_GeneralError"
            }
          }
        },
        "tags": [
          "organizations"
        ],
        "operationId": "getAccountsV01Organizations"
      }
    }
  },
  "definitions": {
    "Config_V1_Entities_TlsCert": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string",
          "description": "Resource type."
        },
        "@id": {
          "type": "string",
          "description": "Used to specify the URI for the resource. Can be used by clients to navigate back to that specific resource."
        },
        "@links": {
          "type": "object",
          "description": "Links to related resources."
        },
        "id": {
          "type": "string",
          "description": "Resource unique identifier."
        },
        "environment_id": {
          "type": "string",
          "description": "Environment ID"
        },
        "primary_cert": {
          "type": "string",
          "description": "Primary certificate. Not returned for records in collection."
        },
        "intermediate_cert": {
          "type": "string",
          "description": "Intermediate certificate. Not returned for records in collection"
        },
        "expiration": {
          "type": "string",
          "format": "date-time",
          "description": "Expiration date"
        },
        "status": {
          "type": "string",
          "description": "Status"
        },
        "generated": {
          "type": "boolean",
          "description": "Generated"
        },
        "serial": {
          "type": "string",
          "description": "Serial"
        },
        "common_name": {
          "type": "string",
          "description": "Common name"
        },
        "alternative_names": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Alternative names"
        },
        "activation_error": {
          "type": "string",
          "description": "Activation error"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "Created at"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "Updated at"
        }
      },
      "required": [
        "@type",
        "@id",
        "id"
      ],
      "description": "Config_V1_Entities_TlsCert model"
    },
    "BaseApi_Entities_UserError": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "description": "Error Message"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BaseApi_Entities_UserErrorData"
          }
        }
      },
      "description": "BaseApi_Entities_UserError model"
    },
    "BaseApi_Entities_UserErrorData": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "BaseApi_Entities_GeneralError": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "description": "Error Message"
        }
      },
      "description": "BaseApi_Entities_GeneralError model"
    },
    "postConfigV01TlsCerts": {
      "type": "object",
      "properties": {
        "environment_id": {
          "type": "string"
        },
        "primary_cert": {
          "type": "string"
        },
        "intermediate_cert": {
          "type": "string"
        },
        "private_key": {
          "type": "string"
        }
      },
      "required": [
        "environment_id",
        "primary_cert",
        "intermediate_cert"
      ],
      "description": "Upload and activate a new TLS certificate for an environment"
    },
    "Config_V1_Entities_TlsCert_Collection": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string",
          "description": "Resource type."
        },
        "@id": {
          "type": "string",
          "description": "Used to specify the URI for the resource. Can be used by clients to navigate back to that specific resource."
        },
        "@links": {
          "$ref": "#/definitions/BaseApi_Entities_HyperionNavigationLinks",
          "description": "Links to related resources."
        },
        "total_items": {
          "type": "integer",
          "format": "int32",
          "description": "Total number of items."
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Config_V1_Entities_TlsCert"
          },
          "description": "Array of items."
        }
      },
      "required": [
        "@type",
        "@id"
      ],
      "description": "Config_V1_Entities_TlsCert_Collection model"
    },
    "BaseApi_Entities_HyperionNavigationLinks": {
      "type": "object",
      "properties": {
        "first": {
          "$ref": "#/definitions/BaseApi_Entities_HyperionLink",
          "description": "Link to the first page of results."
        },
        "next": {
          "$ref": "#/definitions/BaseApi_Entities_HyperionLink",
          "description": "Link to the next page of results."
        },
        "previous": {
          "$ref": "#/definitions/BaseApi_Entities_HyperionLink",
          "description": "Link to the previous page of results."
        },
        "last": {
          "$ref": "#/definitions/BaseApi_Entities_HyperionLink",
          "description": "Link to the last page of results."
        }
      }
    },
    "BaseApi_Entities_HyperionLink": {
      "type": "object",
      "properties": {
        "href": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "base_path": {
          "type": "string"
        }
      }
    },
    "Config_V1_Entities_Deployment_Logs": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string",
          "description": "Resource type."
        },
        "@id": {
          "type": "string",
          "description": "Used to specify the URI for the resource. Can be used by clients to navigate back to that specific resource."
        },
        "@links": {
          "type": "object",
          "description": "Links to related resources."
        },
        "logs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Config_V1_Entities_Deployment_LogLine"
          },
          "description": "Array of logs"
        }
      },
      "required": [
        "@type",
        "@id"
      ],
      "description": "Config_V1_Entities_Deployment_Logs model"
    },
    "Config_V1_Entities_Deployment_LogLine": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "description": "Log message"
        },
        "level": {
          "type": "string",
          "description": "Log level"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "description": "Log timestamp"
        }
      }
    },
    "Config_V1_Entities_Deployment": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string",
          "description": "Resource type."
        },
        "@id": {
          "type": "string",
          "description": "Used to specify the URI for the resource. Can be used by clients to navigate back to that specific resource."
        },
        "@links": {
          "type": "object",
          "description": "Links to related resources."
        },
        "id": {
          "type": "string",
          "description": "Resource unique identifier."
        },
        "status": {
          "type": "string",
          "description": "Indicates the status for the deployment.\nValid values are:\n  - `created`: Initial state.\n  - `uploading`: Waiting for CLI to upload the build. Only applicable for EdgeJS deployments.\n  - `provisioning`: Waiting for the CDN to provision the environment.\n  - `deploying`: Deploying the build to cloud & edge.\n  - `waiting`: Waiting for the edge propagation to complete.\n  - `completed`: Indicates that the deployment has been completed.\n  - `canceled`: Indicates that the deployment has been canceled.\n  - `failed`: Indicates that the deployment has failed.\n"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "Indicates the date and time (UTC) at which the deployment was submitted."
        },
        "completed_at": {
          "type": "string",
          "format": "date-time",
          "description": "Indicates the date and time (UTC) at which the deployment was completed."
        }
      },
      "required": [
        "@type",
        "@id",
        "id"
      ],
      "description": "Config_V1_Entities_Deployment model"
    },
    "Config_V1_Entities_Config": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string",
          "description": "Resource type."
        },
        "@id": {
          "type": "string",
          "description": "Used to specify the URI for the resource. Can be used by clients to navigate back to that specific resource."
        },
        "@links": {
          "type": "object",
          "description": "Links to related resources."
        },
        "id": {
          "type": "string",
          "description": "Resource unique identifier."
        },
        "origins": {
          "type": "string",
          "example": [
            {
              "name": "Edgio",
              "hosts": [
                {
                  "location": [
                    {
                      "hostname": "https://test-origin.edgio.net"
                    }
                  ]
                }
              ]
            }
          ],
          "description": "List of origins for the configuration."
        },
        "hostnames": {
          "type": "string",
          "example": [
            {
              "hostname": "test-origin.edgio.net"
            }
          ],
          "description": "List of hostnames for the configuration."
        },
        "rules": {
          "type": "string",
          "example": [
            {
              "if": [
                {
                  "==": [
                    {
                      "request": "path"
                    },
                    "/api/:path"
                  ]
                },
                {
                  "caching": {
                    "bypass_cache": true
                  }
                }
              ]
            }
          ],
          "description": "List of rules for the configuration."
        },
        "rtld": {
          "type": "string",
          "example": {
            "custom_response_headers": [
              "server-timing"
            ]
          },
          "description": "Real-time log delivery configuration."
        }
      },
      "required": [
        "@type",
        "@id",
        "id"
      ],
      "description": "Config_V1_Entities_Config model"
    },
    "postConfigV01Configs": {
      "type": "object",
      "properties": {
        "environment_id": {
          "type": "string"
        },
        "origins": {
          "type": "array",
          "description": "List of origins for the configuration.",
          "items": {
            "type": "string"
          },
          "example": [
            {
              "name": "Edgio",
              "hosts": [
                {
                  "location": [
                    {
                      "hostname": "https://test-origin.edgio.net"
                    }
                  ]
                }
              ]
            }
          ]
        },
        "hostnames": {
          "type": "array",
          "description": "List of hostnames for the configuration.",
          "items": {
            "type": "string"
          },
          "example": [
            {
              "hostname": "test-origin.edgio.net"
            }
          ]
        },
        "rules": {
          "type": "array",
          "description": "List of rules for the configuration.",
          "items": {
            "type": "string"
          },
          "example": [
            {
              "if": [
                {
                  "==": [
                    {
                      "request": "path"
                    },
                    "/api/:path"
                  ]
                },
                {
                  "caching": {
                    "bypass_cache": true
                  }
                }
              ]
            }
          ]
        },
        "rtld": {
          "type": "object",
          "description": "Real-time log delivery configuration.",
          "example": {
            "custom_response_headers": [
              "server-timing"
            ]
          }
        }
      },
      "required": [
        "environment_id",
        "origins",
        "hostnames"
      ],
      "description": "Replace and deploy a complete edge configuration for the given environment"
    },
    "Cache_V1_Entities_PurgeRequest": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string",
          "description": "Resource type."
        },
        "@id": {
          "type": "string",
          "description": "Used to specify the URI for the resource. Can be used by clients to navigate back to that specific resource."
        },
        "@links": {
          "type": "object",
          "description": "Links to related resources."
        },
        "id": {
          "type": "string",
          "description": "Identifies a purge request by its unique ID and allows further tracking"
        },
        "status": {
          "type": "string",
          "description": "Indicates the status for the purge requests defined in the bulk purge request.\nValid values are:\n  - `in_progress`: Indicates that the purge request has not yet been completed.\n  - `done`: Indicates that the purge request has been completed.\n"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "Indicates the date and time (UTC) at which the purge request was submitted."
        },
        "completed_at": {
          "type": "string",
          "format": "date-time",
          "description": "Indicates the date and time (UTC) at which the purge request was completed."
        },
        "progress_percentage": {
          "type": "number",
          "format": "float",
          "description": "Identifies the percentage of purge request completion."
        }
      },
      "required": [
        "@type",
        "@id",
        "id"
      ],
      "description": "Cache_V1_Entities_PurgeRequest model"
    },
    "postCacheV01PurgeRequests": {
      "type": "object",
      "properties": {
        "environment_id": {
          "type": "string",
          "description": "The ID of the environment you wish to purge cache for, also known as environment tenant ID."
        },
        "purge_type": {
          "type": "string",
          "description": "- `all_entries`: Purges all cache\n- `path`: Purges paths from cache further specified via `values`\n- `surrogate_key`: Purges surrogate keys specified via `values`\n",
          "enum": [
            "all_entries",
            "path",
            "surrogate_key"
          ]
        },
        "values": {
          "type": "array",
          "description": "Depending on `purge_type` this parameter is used to specify further options:\n  - Leave empty if `purge_type` is `all_entries`.\n  - If `purge_type` is `path`, `values` specifies all the paths subject to purging.\n  - If `purge_type` is `surrogate_key`, `values` specifies all the surrogate keys subject to purging.\n",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "environment_id",
        "purge_type"
      ],
      "description": "Request cache purge of environment"
    },
    "Accounts_V1_Entities_Environment": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string",
          "description": "Resource type."
        },
        "@id": {
          "type": "string",
          "description": "Used to specify the URI for the resource. Can be used by clients to navigate back to that specific resource."
        },
        "@links": {
          "type": "object",
          "description": "Links to related resources."
        },
        "id": {
          "type": "string",
          "description": "Resource unique identifier."
        },
        "property_id": {
          "type": "string",
          "description": "Property ID"
        },
        "name": {
          "type": "string",
          "description": "Environment name"
        },
        "can_members_deploy": {
          "type": "boolean",
          "description": "Allow non-admin members to deploy to this environment"
        },
        "http_request_logging": {
          "type": "boolean",
          "description": "Enable deep-request inspection for serverless logs"
        },
        "default_domain_name": {
          "type": "string",
          "description": "Default hostname where the CDN serves the traffic, in addition to custom hostnames"
        },
        "dns_domain_name": {
          "type": "string",
          "description": "Configure your hostname CNAMEs to point to this domain"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "Created at"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "Updated at"
        }
      },
      "required": [
        "@type",
        "@id",
        "id"
      ],
      "description": "Accounts_V1_Entities_Environment model"
    },
    "patchAccountsV01EnvironmentsEnvironmentId": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "can_members_deploy": {
          "type": "boolean"
        },
        "http_request_logging": {
          "type": "boolean"
        },
        "preserve_cache": {
          "type": "boolean"
        }
      },
      "description": "Update environment"
    },
    "postAccountsV01Environments": {
      "type": "object",
      "properties": {
        "property_id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "can_members_deploy": {
          "type": "boolean"
        },
        "http_request_logging": {
          "type": "boolean"
        }
      },
      "required": [
        "property_id",
        "name"
      ],
      "description": "Create a new environment"
    },
    "Accounts_V1_Entities_Environment_Collection": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string",
          "description": "Resource type."
        },
        "@id": {
          "type": "string",
          "description": "Used to specify the URI for the resource. Can be used by clients to navigate back to that specific resource."
        },
        "@links": {
          "$ref": "#/definitions/BaseApi_Entities_HyperionNavigationLinks",
          "description": "Links to related resources."
        },
        "total_items": {
          "type": "integer",
          "format": "int32",
          "description": "Total number of items."
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Accounts_V1_Entities_Environment"
          },
          "description": "Array of items."
        }
      },
      "required": [
        "@type",
        "@id"
      ],
      "description": "Accounts_V1_Entities_Environment_Collection model"
    },
    "Accounts_V1_Entities_Property": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string",
          "description": "Resource type."
        },
        "@id": {
          "type": "string",
          "description": "Used to specify the URI for the resource. Can be used by clients to navigate back to that specific resource."
        },
        "@links": {
          "type": "object",
          "description": "Links to related resources."
        },
        "id": {
          "type": "string",
          "description": "Resource unique identifier."
        },
        "organization_id": {
          "type": "string",
          "description": "Organization ID"
        },
        "slug": {
          "type": "string",
          "description": "Property slug"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "Created at"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "Updated at"
        }
      },
      "required": [
        "@type",
        "@id",
        "id"
      ],
      "description": "Accounts_V1_Entities_Property model"
    },
    "patchAccountsV01PropertiesPropertyId": {
      "type": "object",
      "properties": {
        "slug": {
          "type": "string"
        }
      },
      "description": "Update property"
    },
    "postAccountsV01Properties": {
      "type": "object",
      "properties": {
        "slug": {
          "type": "string"
        },
        "organization_id": {
          "type": "string"
        }
      },
      "required": [
        "slug",
        "organization_id"
      ],
      "description": "Create a new property"
    },
    "Accounts_V1_Entities_Property_Collection": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string",
          "description": "Resource type."
        },
        "@id": {
          "type": "string",
          "description": "Used to specify the URI for the resource. Can be used by clients to navigate back to that specific resource."
        },
        "@links": {
          "$ref": "#/definitions/BaseApi_Entities_HyperionNavigationLinks",
          "description": "Links to related resources."
        },
        "total_items": {
          "type": "integer",
          "format": "int32",
          "description": "Total number of items."
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Accounts_V1_Entities_Property"
          },
          "description": "Array of items."
        }
      },
      "required": [
        "@type",
        "@id"
      ],
      "description": "Accounts_V1_Entities_Property_Collection model"
    },
    "Accounts_V1_Entities_Organization": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string",
          "description": "Resource type."
        },
        "@id": {
          "type": "string",
          "description": "Used to specify the URI for the resource. Can be used by clients to navigate back to that specific resource."
        },
        "@links": {
          "type": "object",
          "description": "Links to related resources."
        },
        "id": {
          "type": "string",
          "description": "Resource unique identifier."
        },
        "partner_id": {
          "type": "string",
          "description": "Partner ID"
        },
        "name": {
          "type": "string",
          "description": "Organization name"
        },
        "pci_compliance": {
          "type": "string",
          "enum": [
            "pci",
            "non_pci",
            "mixed"
          ],
          "description": "The overall PCI compliance based on the PCI settings of all environments in scope of this organization"
        },
        "pci_dns_domain_name": {
          "type": "string",
          "description": "The PCI-compliant DNS domain for this organization. Configure your hostname CNAMEs to point to this domain."
        },
        "non_pci_dns_domain_name": {
          "type": "string",
          "description": "The non PCI-compliant DNS domain for this organization. Configure your hostname CNAMEs to point to this domain."
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "Created at"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "Updated at"
        }
      },
      "required": [
        "@type",
        "@id",
        "id"
      ],
      "description": "Accounts_V1_Entities_Organization model"
    },
    "patchAccountsV01OrganizationsOrganizationId": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        }
      },
      "description": "Update organization"
    },
    "postAccountsV01Organizations": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "description": "Create a new organization"
    },
    "Accounts_V1_Entities_Organization_Collection": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string",
          "description": "Resource type."
        },
        "@id": {
          "type": "string",
          "description": "Used to specify the URI for the resource. Can be used by clients to navigate back to that specific resource."
        },
        "@links": {
          "$ref": "#/definitions/BaseApi_Entities_HyperionNavigationLinks",
          "description": "Links to related resources."
        },
        "total_items": {
          "type": "integer",
          "format": "int32",
          "description": "Total number of items."
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Accounts_V1_Entities_Organization"
          },
          "description": "Array of items."
        }
      },
      "required": [
        "@type",
        "@id"
      ],
      "description": "Accounts_V1_Entities_Organization_Collection model"
    }
  }
}
